<?php

namespace App\Services\Telegram\QuizService;

use App\Telegram\Commands\QuizCommand;
use App\Models\UserState;
use Telegram\Bot\FileUpload\InputFile;
use Telegram\Bot\Laravel\Facades\Telegram as TelegramFacade;
use App\Models\Question;
use App\Models\User;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Keyboard\Keyboard;

class QuizService
{
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    public function handleIncorrectAnswer(int $chatId): void
    {
        $text = '–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî. –ü–æ–¥—É–º–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
        ]);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    public function handleCorrectAnswer(User $user, int $currentQuestionId, int $chatId): void
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        Log::info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$user->id} –Ω–∞ –≤–æ–ø—Ä–æ—Å {$currentQuestionId}");

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        $this->sendCurrentQuestionExplanation($currentQuestionId, $chatId);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (!$this->sendNextQuestion($user, $currentQuestionId, $chatId)) {
            $this->completeQuiz($user, $chatId);
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≥—Ä—É–∂–∞—è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    protected function sendCurrentQuestionExplanation(int $currentQuestionId, int $chatId): void
    {
        $currentQuestion = Question::find($currentQuestionId);

        if (!empty($currentQuestion->explanation)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            $explanationText = '<em>' . $currentQuestion->explanation . '</em>';
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => $explanationText,
                'parse_mode' => 'HTML',
            ]);
            Log::info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {$currentQuestionId}");
        }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    protected function sendNextQuestion(User $user, int $currentQuestionId, int $chatId): bool
    {
        $nextQuestionId = Question::where('id', '>', $currentQuestionId)->min('id');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        $nextQuestionExists = Question::where('id', $nextQuestionId)->exists();

        if (!$nextQuestionExists) {
            return false; // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑.
        }

        $nextQuestion = Question::with(['answers', 'pictures'])->find($nextQuestionId);
        if ($nextQuestion) {
            $text = '<strong>' . $nextQuestion->text . '</strong>' . PHP_EOL;
            $keyboard = QuizCommand::createQuestionKeyboard($nextQuestion);

            $this->sendQuestion($nextQuestion, $text, $keyboard, $chatId);

            UserState::updateOrCreate(
                ['user_id' => $user->id],
                ['state' => 'quiz_in_progress', 'current_question_id' => $nextQuestionId]
            );

            Log::info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å {$nextQuestionId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$user->id}");

            return true;
        }
        return false;
    }

    // –ï—Å–ª–∏ —É –≤–æ–ø—Ä–æ—Å–∞ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–µ –≤–º–µ—Å—Ç–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å
    protected function sendQuestion(Question $question, string $text, array $keyboard, int $chatId): void
    {
        Log::info("–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞", ['question_id' => $question->id, 'chat_id' => $chatId]);

        if ($question->pictures->isNotEmpty()) {
            $mediaGroup = collect();

            foreach ($question->pictures as $picture) {
                Log::info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", ['picture_id' => $picture->id]);

                if ($picture->telegram_file_id) {
                    Log::info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ telegram_file_id", 
                    ['telegram_file_id' => $picture->telegram_file_id]);

                    $mediaItem = [
                        'type' => 'photo',
                        'media' => $picture->telegram_file_id,
                    ];
                } else {
                    $imagePath = storage_path('app/public/' . $picture->path);
                    Log::info("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", ['image_path' => $imagePath]);
                    $mediaItem = [
                        'type' => 'photo',
                        'media' => InputFile::create($imagePath, basename($imagePath)),
                    ];
                }

                $mediaGroup->push($mediaItem);
            }

            Log::info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", ['media_group_count' => $mediaGroup->count()]);
            TelegramFacade::sendMediaGroup([
                'chat_id' => $chatId,
                'media' => $mediaGroup,
            ]);
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        Log::info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π");
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $text, // –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
            'parse_mode' => 'HTML',
        ]);
        Log::info("–ö–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞");
    }


    // –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–≤–∏–∑ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    protected function completeQuiz(User $user, int $chatId): void
    {
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => '<strong>' . '–ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä' . '</strong>' . '

–ö–∞–∂–µ—Ç—Å—è –≤—ã —É–∂–µ –ø—Ä–æ–Ω–∏–∫–ª–∏—Å—å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –¥–µ–ª–µ. –ü–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —ç—Ç–æ–º –ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä. 

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∫–∞—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–º—É —Ü–µ–Ω—Ç—Ä—É.
            
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä –ø—Ä–∏—à–ª—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è.

- –° —ç—Ç–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –ø–æ –¥–µ—Ñ–æ–ª—Ç—É —Å–ø—Ä–∞–≤—è—Ç—Å—è –≤—Å–µ, —Ç–æ –µ—Å—Ç—å –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è. 
            ',

            'parse_mode' => 'HTML',
        ]);

        UserState::updateOrCreate(
            ['user_id' => $user->id],
            ['state' => 'quiz_completed', 'current_question_id' => null]
        );

        Log::info("–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$user->id}");
    }
}
