<?php

namespace App\Services\Telegram\QuizService;

use App\Telegram\Commands\QuizCommand;
use App\Models\UserState;
use Telegram\Bot\FileUpload\InputFile;
use Telegram\Bot\Laravel\Facades\Telegram as TelegramFacade;
use App\Models\Question;
use App\Models\User;
use Illuminate\Support\Facades\Log;

class QuizService
{
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    public function handleIncorrectAnswer(int $chatId): void
    {
        $text = '‚ùå –ù–µ–≤–µ—Ä–Ω–æ.' . PHP_EOL;
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
        ]);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    public function handleCorrectAnswer(User $user, int $currentQuestionId, int $chatId): void
    {
        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        Log::info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$user->id} –Ω–∞ –≤–æ–ø—Ä–æ—Å {$currentQuestionId}");

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => "<strong>" . "–û—Ç–≤–µ—Ç:" . PHP_EOL .  PHP_EOL .  "‚úÖ –í–µ—Ä–Ω–æ!" . "</strong>" . PHP_EOL,
            'parse_mode' => 'HTML',
        ]);
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        $this->sendCurrentQuestionExplanation($currentQuestionId, $chatId);

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–≤–∏–∑–∞, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        if (!$this->sendNextQuestion($user, $currentQuestionId, $chatId)) {
            $this->completeQuiz($user, $chatId);
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ—Ç–ø—Ä–∞–≤–ª—è—è –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≥—Ä—É–∂–∞—è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    protected function sendCurrentQuestionExplanation(int $currentQuestionId, int $chatId): void
    {
        $currentQuestion = Question::find($currentQuestionId);

        if (!empty($currentQuestion->explanation)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            $explanationText = '<em>' . 'üî∏' . $currentQuestion->explanation . '</em>';
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => $explanationText,
                'parse_mode' => 'HTML',
            ]);
            Log::info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {$currentQuestionId}");
        }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public function sendNextQuestion(User $user, int $currentQuestionId, int $chatId): bool
    {
        $totalQuestions = Question::count(); // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
        $questionIndex = Question::where('id', '<=', $currentQuestionId)->count() + 1; // –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

        $nextQuestionId = Question::where('id', '>', $currentQuestionId)->min('id');

        $nextQuestionExists = Question::where('id', $nextQuestionId)->exists();

        if (!$nextQuestionExists) {
            return false; // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –∫–≤–∏–∑
        }

        $nextQuestion = Question::with(['answers', 'pictures'])->find($nextQuestionId);
        if ($nextQuestion) {
            $text = '<strong>' . '–í–û–ü–†–û–° #' . $questionIndex . PHP_EOL . PHP_EOL . $nextQuestion->text . PHP_EOL . '</strong>';
            $keyboard = QuizCommand::createQuestionKeyboard($nextQuestion);

            $this->sendQuestion($nextQuestion, $text, $keyboard, $chatId);

            UserState::updateOrCreate(
                ['user_id' => $user->id],
                ['state' => 'quiz_in_progress', 'current_question_id' => $nextQuestionId]
            );

            Log::info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å {$nextQuestionId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$user->id}");

            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–æ–ø—Ä–æ—Å–æ–º.
    protected function sendQuestion(Question $question, string $text, array $keyboard, int $chatId): void
    {
        $mediaGroup = collect();

        // –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –≤–æ–ø—Ä–æ—Å–æ–º.
        foreach ($question->pictures as $picture) {
            Log::info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞", ['question_id' => $question->id, 'picture_id' => $picture->id]);
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å telegram_file_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–ª—É—á–∞–µ–º –µ—ë ID.
            $telegramFileId = $picture->telegram_file_id ?: $this->sendPictureAndGetFileId($picture, $chatId);
            // –ï—Å–ª–∏ ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            if ($telegramFileId) {
                $mediaGroup->push([
                    'type' => 'photo',
                    'media' => $telegramFileId,
                ]);
            }
        }
        // –ï—Å–ª–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –≥—Ä—É–ø–ø–æ–π.
        if ($mediaGroup->isNotEmpty()) {
            Log::info("–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä—É–ø–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", ['chat_id' => $chatId]);
            TelegramFacade::sendMediaGroup([
                'chat_id' => $chatId,
                'media' => $mediaGroup->toJson(), // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
            ]);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ.
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $text,
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard], JSON_UNESCAPED_UNICODE), // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
            'parse_mode' => 'HTML', // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        ]);
        Log::info("–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", ['chat_id' => $chatId, 'question_id' => $question->id]);
    }

    // –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π telegram_file_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    protected function sendPictureAndGetFileId($picture, $chatId)
    {
        $imagePath = storage_path('app/public/' . $picture->path); // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        if (!file_exists($imagePath)) { // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É.
            Log::error("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", ['imagePath' => $imagePath]);
            return null; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null.
        }

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç Telegram –∏ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç.
            $response = TelegramFacade::sendPhoto([
                'chat_id' => $chatId,
                'photo' => InputFile::create($imagePath, basename($imagePath)),
            ]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –∏ –ø–æ–ª—É—á–∞–µ–º telegram_file_id.
            if ($response && $response->getPhoto()) {
                $photos = $response->getPhoto();
                $telegramFileId = collect($photos)->last()->fileId; // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π telegram_file_id –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.

                $picture->telegram_file_id = $telegramFileId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_file_id –≤ –æ–±—ä–µ–∫—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏.
                $picture->save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
                Log::info("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ telegram_file_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω", ['picture_id' => $picture->id, 'telegram_file_id' => $telegramFileId]);

                return $telegramFileId; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º telegram_file_id.
            }
        } catch (\Exception $e) {
            // –í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", ['exception' => $e->getMessage(), 'imagePath' => $imagePath]);
        }

        return null;
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∫–≤–∏–∑ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    protected function completeQuiz(User $user, int $chatId): void
    {
        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => '<strong>' . '–í–û–ü–†–û–° #7' . '

ü§© –ö–∞–∂–µ—Ç—Å—è –≤—ã —É–∂–µ –ø—Ä–æ–Ω–∏–∫–ª–∏—Å—å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. –°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ –¥–µ–ª–µ. –ü–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —ç—Ç–æ–º [–ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä](https://neuro-texter.ru/). 

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –∫–∞—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–µ–π—Ç–±–æ—Ä–¥–µ –ø–æ –º–∞–≥–∞–∑–∏–Ω—É. 
                            
üñ• –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É [–ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä](https://neuro-texter.ru/) –ø—Ä–∏—à–ª—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ —É –≤–∞—Å –ø–æ–ª—É—á–∏—Ç—Å—è.
            ' . '</strong>',

            'parse_mode' => 'HTML',
        ]);

        UserState::updateOrCreate(
            ['user_id' => $user->id],
            ['state' => 'quiz_completed', 'current_question_id' => null]
        );

        Log::info("–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {$user->id}");
    }
}
