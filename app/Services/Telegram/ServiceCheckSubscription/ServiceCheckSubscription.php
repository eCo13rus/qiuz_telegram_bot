<?php

namespace App\Services\Telegram\ServiceCheckSubscription;

use Telegram\Bot\Objects\CallbackQuery;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram as TelegramFacade;
use App\Models\User;
use Illuminate\Support\Facades\Http;
use App\Traits\ResultMessageTrait;

class ServiceCheckSubscription
{
    use ResultMessageTrait;
    // // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    public function generateDeepLink($telegramUserId): string
    {
        $channelName = env('TG_KANAL');
        return "https://t.me/{$channelName}?start={$telegramUserId}";
    }

    // –ó–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É –∫–æ—Ç–æ—Ä—ã–π –≤ –∫–∞–Ω–∞–ª–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —é–∑–µ—Ä–∞
    public function checkUserSubscription(int $userId): bool
    {
        Log::info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', ['id' => $userId]);

        $token = env('TG_BOT_TOKEN_KANAL');
        $channel = env('TG_KANAL');
        $url = "https://api.telegram.org/bot{$token}/getChatMember?chat_id={$channel}&user_id={$userId}";

        try {
            $response = Http::get($url);
            $data = $response->json();

            Log::info('–û—Ç–≤–µ—Ç –æ—Ç Telegram API', ['data' => $data]);

            if ($response->successful() && $data['ok']) {
                return in_array($data['result']['status'], ['member', 'administrator', 'creator']);
            }

            Log::error("–û—à–∏–±–∫–∞ API Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏", ['error' => $data['description'] ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏']);
        } catch (\Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Telegram API", ['exception' => $e->getMessage()]);
        }

        return false;
    }

    public function handleSubscriptionCallback(CallbackQuery $callbackQuery)
    {
        Log::info('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏', ['input' => request()->all()]);

        $callbackData = $callbackQuery->getData();
        $userId = $callbackQuery->getFrom()->getId();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        if (strpos($callbackData, 'subscribed_') === 0) {
            $telegramId = str_replace('subscribed_', '', $callbackData);

            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            $user = User::where('telegram_id', $telegramId)->first();

            if ($user) {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                $isSubscribed = $this->checkUserSubscription($userId);

                if ($isSubscribed) {
                    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    try {
                        $user->update(['is_subscribed' => true]);
                        Log::info("–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω", ['is_subscribed' => $user->is_subscribed]);
                        $confirmationMessage = "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.";

                        // –û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        $bonusMessage = "ü§´ –î–µ–ª–∏–º—Å—è —Å —Ç–æ–±–æ–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º ¬´–ù–µ–π—Ä–æ–•–æ–ª—Å—Ç¬ª, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–æ—Å–æ–±–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ DALL-E –∏ Midjourney.\n\n–¢–µ–±–µ –Ω–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è VPN, –∑–∞—Ä—É–±–µ–∂–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏ –¥–∞–∂–µ –∑–Ω–∞–Ω–∏–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\nüëá –ü—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá\n\n      üí∞–≠—Ç–æ –ë–ï–°–ü–õ–ê–¢–ù–ûüí∞ ";

                        $buttonUrlForNeuroHolst = route('neuroholst.redirect', ['userId' => $userId]);

                        TelegramFacade::sendMessage([
                            'chat_id' => $userId,
                            'text' => $bonusMessage,
                            'parse_mode' => 'HTML',
                            'reply_markup' => json_encode([
                                'inline_keyboard' => [
                                    [[
                                        'text' => '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏ –ø–µ—Ä–µ–π—Ç–∏',
                                        'url' => $buttonUrlForNeuroHolst,
                                    ]]
                                ]
                            ])
                        ]);
                    } catch (\Exception $e) {
                        Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " . $e->getMessage());
                    }
                } else {
                    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞
                    $confirmationMessage = "‚ùóÔ∏è –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å.";
                    TelegramFacade::sendMessage([
                        'chat_id' => $userId,
                        'text' => $confirmationMessage,
                        'parse_mode' => 'HTML',
                    ]);
                }
            } else {
                Log::error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {$telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        }
    }
}
