<?php

namespace App\Services\Telegram\CallbackQueryService;

use Telegram\Bot\Laravel\Facades\Telegram as TelegramFacade;
use App\Models\Question;
use Telegram\Bot\Objects\CallbackQuery;
use App\Models\User;
use Illuminate\Support\Facades\Log;
use App\Services\Telegram\QuizService\QuizService;

class CallbackQueryService
{
    protected $quizService;

    public function __construct(QuizService $quizService)
    {
        $this->quizService = $quizService;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–Ω–æ–ø–æ–∫(–æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    public function handleCallbackQuery(CallbackQuery $callbackQuery): void
    {
        Log::info('Webhook hit', ['input' => request()->all()]);

        $callbackData = $callbackQuery->getData();
        $message = $callbackQuery->getMessage();
        $chatId = $message->getChat()->getId();

        Log::info("Handling callback query", ['callbackData' => $callbackData, 'chatId' => $chatId]);

        try {
            $parts = explode('_', $callbackData);
            if (count($parts) === 4 && $parts[0] === 'question') {
                $this->processCallbackData($parts, $chatId, $callbackQuery);
            }

            TelegramFacade::answerCallbackQuery([
                'callback_query_id' => $callbackQuery->getId(),
            ]);
        } catch (\Telegram\Bot\Exceptions\TelegramResponseException $e) {
            Log::error("Telegram response exception", ['message' => $e->getMessage(), 'chatId' => $chatId]);
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π...
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∏–∫—Ç–æ—Ä–∏–Ω–æ–π.
    protected function processCallbackData(array $parts, int $chatId, CallbackQuery $callbackQuery): void
    {
        Log::info("Processing callback data", ['parts' => $parts, 'chatId' => $chatId]);

        $telegramUserId = $callbackQuery->getFrom()->getId();
        $currentQuestionId = (int) $parts[1];
        $currentAnswerId = (int) $parts[3];

        Log::debug("Callback data details", ['telegramUserId' => $telegramUserId, 'currentQuestionId' => $currentQuestionId, 'currentAnswerId' => $currentAnswerId]);

        $user = User::firstOrCreate(['telegram_id' => $telegramUserId]);
        Log::info("User fetched or created", ['userId' => $user->id]);

        $isCorrect = Question::find($currentQuestionId)
            ->answers()
            ->where('id', $currentAnswerId)
            ->where('is_correct', true)
            ->exists();

        $user->quizResponses()->create([
            'answer_id' => $currentAnswerId,
            'is_correct' => $isCorrect,
        ]);

        $messageText = $isCorrect ? "‚úÖ –í–µ—Ä–Ω–æ!" . PHP_EOL . PHP_EOL : "‚ùå –ù–µ–≤–µ—Ä–Ω–æ.\n";

        if (!$isCorrect) {
            $correctAnswer = Question::find($currentQuestionId)
                ->answers()
                ->where('is_correct', true)
                ->first();

            if ($correctAnswer) {
                $messageText .= PHP_EOL . "<strong>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: " . $correctAnswer->text . "</strong>\n\n";
            } else {
                $messageText .= "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.\n\n";
            }
        }

        $explanationText = $this->getCurrentQuestionExplanation($currentQuestionId);
        if (!empty($explanationText)) {
            $messageText .= $explanationText;
        }

        TelegramFacade::sendMessage([
            'chat_id' => $chatId,
            'text' => $messageText,
            'parse_mode' => 'HTML',
        ]);

        if (!$this->quizService->sendNextQuestion($user, $currentQuestionId, $chatId)) {
            $this->quizService->completeQuiz($user, $chatId);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≥—Ä—É–∂–∞—è —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
    public function getCurrentQuestionExplanation(int $currentQuestionId): ?string
    {
        $currentQuestion = Question::find($currentQuestionId);

        if (!empty($currentQuestion->explanation)) {
            return '<em>' . 'üî∏' . htmlspecialchars($currentQuestion->explanation) . '</em>';
        }
        return null;
    }

    // –í—ã–≤–æ–¥–∏—Ç —Ñ–∏–Ω–æ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    public function getResultMessage(int $score): array
    {
        if ($score <= 2) {
            $result = 'ü§ì –£—á–µ–Ω–∏–∫.';
        } elseif ($score <= 5) {
            $result = 'üòè –£–≤–µ—Ä–µ–Ω–Ω—ã–π —é–∑–µ—Ä.';
        } else {
            $result = 'üòé –í—Å–µ–≤–∏–¥—è—â–µ–µ –æ–∫–æ.';
        }

        $titleMessage = "<strong>–¢–≤–æ—ë –∑–≤–∞–Ω–∏–µ: $result</strong>\n\n";
        $additionalMessage = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: $score<strong>\n\nüò≥ –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –≤–µ—Ä–Ω–æ?</strong>" . "\n\n–¢–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ —É–±–µ–¥–∏–ª—Å—è, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ - –≤–∞–∂–Ω–∞—è —á–∞—Å—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∏—Ä–∞ –∏ —Å–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –∏—Ö –∏–∑—É—á–∞—Ç—å.\n\nüéÅ –ê —á—Ç–æ–±—ã —Å—Ç–∞—Ä—Ç –±—ã–ª –ª–µ–≥—á–µ, –¥–µ—Ä–∂–∏ –±–æ–Ω—É—Å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è <a href=\"https://neuro-texter.ru/\">–ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä–∞</a>.\n\n–° –Ω–∏–º–∏ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å–æ–≤—É—é, —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç, —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –º–Ω–æ–≥–æ —á–µ–≥–æ –µ—â–µ. <a href=\"https://neuro-texter.ru/\">üëâ–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏üëà</a>";

        Log::info("–ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ: $result");

        return [
            'title' => $titleMessage,
            'additional' => "<strong>$additionalMessage</strong>"
        ];
    }
}
