<?php

namespace App\Services\Telegram\SDXLCallbackService;

use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram as TelegramFacade;
use Telegram\Bot\FileUpload\InputFile;
use Illuminate\Http\Request;
use App\Services\Telegram\QuizService\QuizService;
use App\Models\User;

class SDXLCallbackService
{
    protected $quizService;

    public function __construct(QuizService $quizService)
    {
        $this->quizService = $quizService;
    }
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫ –æ—Ç SDXL API
    public function processDalleCallback(Request $request, $chatId)
    {
        Log::info("–ü–æ–ª—É—á–µ–Ω –∫–æ–ª–±—ç–∫ –æ—Ç SDXL", ['chatId' => $chatId, 'requestData' => $request->all()]);

        $data = $request->json()->all();

        if (!isset($data['request_id'])) {
            Log::error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç request_id –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞", ['data' => $data]);
            return response()->json(['error' => '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç request_id'], 400);
        }

        switch ($data['status']) {
            case 'processing':
                $this->handleProcessingStatus($data, $chatId);
                break;
            case 'success':
                $this->handleSuccessStatus($data, $chatId);
                break;
            default:
                Log::error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞", ['data' => $data]);
                TelegramFacade::sendMessage([
                    'chat_id' => $chatId,
                    'text' => '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.'
                ]);
        }

        return response()->json(['status' => 'success']);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'processing' –∫–æ–ª–±—ç–∫–∞ –æ—Ç SDXL API
    protected function handleProcessingStatus($data, $chatId)
    {
        Log::info("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", ['data' => $data]);
        $imageUrl = $data['result'][0] ?? null;

        if ($imageUrl) {
            $this->sendImageToTelegram($imageUrl, $chatId);
        } else {
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => '–í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
            ]);
        }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 'success' –∫–æ–ª–±—ç–∫–∞ –æ—Ç SDXL API
    protected function handleSuccessStatus($data, $chatId)
    {
        Log::info("–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", ['data' => $data]);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        if (!isset($data['result']) || empty($data['result'])) {
            Log::error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ–≥–æ –∫–æ–ª–±—ç–∫–∞", ['data' => $data]);
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.'
            ]);
            return;
        }

        $imageUrl = $data['result'][0];

        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞
        $this->sendImageToTelegram($imageUrl, $chatId);

        // –ò –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        $this->sendQuizResults($chatId);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —á–∞—Ç Telegram
    protected function sendImageToTelegram($imageUrl, $chatId): bool
    {
        Log::info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram", ['imageUrl' => $imageUrl]);

        try {
            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InputFile –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            $photo = InputFile::create($imageUrl);
            TelegramFacade::sendPhoto([
                'chat_id' => $chatId,
                'photo' => $photo,
            ]);

            return true; // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        } catch (\Exception $e) {
            Log::error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram", ['error' => $e->getMessage()]);
            return false; // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    protected function sendQuizResults($chatId)
    {
        $user = User::where('telegram_id', $chatId)->first();

        if ($user) {
            $score = $this->quizService->calculateQuizResults($user);
            $resultMessages = $this->quizService->getResultMessage($score);

            // –ü–æ–ª—É—á–∞–µ–º telegramFileId –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            $telegramFileId = $this->quizService->fetchResultImage($score, $chatId);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–∞–Ω–∏–µ
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => $resultMessages['title'],
                'parse_mode' => 'HTML',
            ]);

            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∫ –∑–≤–∞–Ω–∏—é
            if ($telegramFileId) {
                TelegramFacade::sendPhoto([
                    'chat_id' => $chatId,
                    'photo' => $telegramFileId,
                ]);

                // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∏–∑–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü image_generated
                $user->state()->update(['state' => 'image_generated']);

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ `image_generated` –¥–ª—è –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–≤–∏–∑
                $user->quizResponses()->update(['image_generated' => true]);
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => $resultMessages['additional'],
                'parse_mode' => 'HTML',
            ]);

            $deepLink = $this->generateDeepLink($user->telegram_id);
            Log::info('id', ['id' => $deepLink]);

            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é
            TelegramFacade::sendMessage([
                'chat_id' => $chatId,
                'text' => "üöÄ –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞? –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à <a href=\"{$deepLink}\">–∫–∞–Ω–∞–ª</a>",
                'parse_mode' => 'HTML',
                'reply_markup' => json_encode([
                    'inline_keyboard' => [
                        [
                            ['text' => 'üîî –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª', 'url' => $deepLink],
                            ['text' => '‚úÖ –Ø —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', 'callback_data' => 'subscribed_' . $user->id],
                        ]
                    ]
                ]),
            ]);
        }
    }

    // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
    public function generateDeepLink($telegramUserId): string
    {
        return getenv('TG_KANAL') . "?start={$telegramUserId}";
    }

    //–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
    //–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
    public function handleChannelBotResponse(Request $request)
    {
        Log::info('–ü–æ–ª—É—á–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ handleChannelBotResponse', ['data' => $request->all()]);

        $callbackData = $request->input('data');
        $chatId = $request->input('chatId');

        Log::info('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞', ['callbackData' => $callbackData, 'chatId' => $chatId]);

        if ($callbackData === 'subscribed_1') {
            Log::info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: true', ['chatId' => $chatId]);

            try {
                $user = User::where('telegram_id', $chatId)->firstOrFail();
                Log::info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', ['userId' => $user->id]);

                $user->is_subscribed = 1; // –í–æ–∑–º–æ–∂–Ω–æ, —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–Ω–æ.

                if ($user->save()) {
                    Log::info('–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω', ['userId' => $user->id]);
                } else {
                    Log::error('–û—à–∏–±–∫–∞: save() –±—ã–ª –≤—ã–∑–≤–∞–Ω, –Ω–æ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω', ['userId' => $user->id]);
                }
            } catch (\Exception $e) {
                Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', ['exception' => $e->getMessage()]);
            }
        } else {
            Log::info('callbackData –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é', ['callbackData' => $callbackData]);
        }

        return response()->json(['success' => true]);
    }
}
