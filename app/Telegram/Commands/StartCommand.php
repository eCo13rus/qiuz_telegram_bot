<?php

namespace App\Telegram\Commands;

use Illuminate\Support\Facades\Log;
use Telegram\Bot\Actions;
use Telegram\Bot\Commands\Command;
use App\Models\UserState;
use App\Models\User;
use App\Models\Question;
use Illuminate\Support\Facades\Cache;

class StartCommand extends Command
{
    protected string $name = 'start';
    protected string $description = '–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏';

    public function getName(): string
    {
        return $this->name;
    }

    public function handle()
    {
        Log::info('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã', ['command' => $this->getName()]);

        // –ü–æ–ª—É—á–∞–µ–º –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        $telegramUserId = $this->update->getMessage()->getFrom()->getId();
        $arguments = explode(' ', $this->update->getMessage()->getText());
        $utmSource = count($arguments) > 1 ? $arguments[1] : null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∞–±–ª–∏—Ü–µ `users`, –µ—Å–ª–∏ –Ω–µ —Ç–æ —Å–æ–∑–¥–∞–µ–º
        $user = User::firstOrCreate(['telegram_id' => $telegramUserId]);

        // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –º—ã –º–æ–∂–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ `user_states`
        UserState::updateOrCreate(
            ['user_id' => $user->id],
            ['state' => 'start', 'utm_source' => $utmSource],
        );

        $this->replyWithChatAction(['action' => Actions::TYPING]);

        $chat_id = $this->getUpdate()->getMessage()->getChat()->getId();
        $currentQuestionId = Cache::get('chat_' . $chat_id . '_current_question_id', function () {
            return Question::first()->id;
        });
        $question = Question::with('answers')->find($currentQuestionId);
        $keyboard = $this->createQuestionKeyboard($question);

        $this->replyWithMessage([
            'text' => "–ü—Ä–∏–≤–µ—Ç! ü§ó\n–≠—Ç–æ –∫–≤–∏–∑-–∏–≥—Ä–∞ —Å –Ω–∞—à–∏–º –ù–µ–π—Ä–æ–¢–µ–∫—Å—Ç–µ—Ä–æ–º.\n–ü—Ä–æ—Ö–æ–¥–∏ –∫–≤–∏–∑ –¥–æ –∫–æ–Ω—Ü–∞ –∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ–ª—É—á–∞–π –ø–æ–¥–∞—Ä–∫–∏üéÅ\n\n<strong>–í–û–ü–†–û–° #1\n\n{$question->text}\n</strong>\n<em>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞:</em>",
            'parse_mode' => 'HTML',
            'reply_markup' => json_encode(['inline_keyboard' => $keyboard]),
        ]);
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∫–Ω–æ–ø–æ–∫ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    public static function createQuestionKeyboard($question): array
    {
        $keyboard = [];
        $answers = $question->answers->toArray();

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–º–µ–µ—Ç ID 36, –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        if ($question->id == 66) {
            foreach ($answers as $answer) {
                $keyboard[] = [[
                    'text' => $answer['text'],
                    'callback_data' => "question_{$question->id}_answer_{$answer['id']}"
                ]];
            }
        } else {
            // –ò—Å—Ö–æ–¥–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            for ($i = 0; $i < count($answers); $i += 2) {
                $row = [];

                if (isset($answers[$i])) {
                    $row[] = [
                        'text' => $answers[$i]['text'],
                        'callback_data' => "question_{$question->id}_answer_{$answers[$i]['id']}"
                    ];
                }

                if (isset($answers[$i + 1])) {
                    $row[] = [
                        'text' => $answers[$i + 1]['text'],
                        'callback_data' => "question_{$question->id}_answer_{$answers[$i + 1]['id']}"
                    ];
                }

                if (!empty($row)) {
                    $keyboard[] = $row;
                }
            }
        }

        return $keyboard;
    }
}
