<?php

namespace App\Providers;

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Illuminate\Support\Facades\Log;

class ChatGPTService
{
    protected $client;
    protected $apiKey;

    public function __construct()
    {
        $this->client = new Client(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP –∫–ª–∏–µ–Ω—Ç–∞
        $this->apiKey = config('services.chatgpt.api_key'); // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    }

    public function ask($question, $chatId)
    {
        Log::info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –∫ gen-api.ru", ['question' => $question, 'chatId' => $chatId]);

        try {
            $messages = json_encode([
                [
                    'role' => 'user',
                    'content' => $question
                ]
            ]);

            $response = $this->client->post(
                'https://api.gen-api.ru/api/v1/networks/chat-gpt-4-turbo',
                [
                    'headers' => [
                        'Authorization' => 'Bearer ' . $this->apiKey,
                        'Accept' => 'application/json',
                    ],
                    'json' => [
                        'messages' => $messages,
                        'is_sync' => true,
                    ],
                ]
            );

            $bodyRaw = (string) $response->getBody();
            Log::info("–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç gen-api.ru", ['responseBody' => $bodyRaw]);
            $body = json_decode($bodyRaw, true);

            $body = json_decode((string) $response->getBody(), true);

            Log::info("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç gen-api.ru", ['body' => $body]);

            return $body['output'] ?? $body;
        } catch (RequestException $e) {
            Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ gen-api.ru: ' . $e->getMessage());

            Log::error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–∞', [
                'request' => $e->getRequest() ? (string) $e->getRequest()->getBody() : '–ø—É—Å—Ç–æ–π –±–æ–¥–∏',
                'response' => $e->hasResponse() ? (string) $e->getResponse()->getBody() : '–ø—É—Å—Ç–æ –æ—Ç–≤–µ—Ç',
            ]);

            return response()->json([
                'error' => '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT.',
                'details' => $e->getMessage()
            ], 422);
        }
    }

    public function handleRequest($question, $chatId)
    {
        $response = $this->ask($question, $chatId); // –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ ask –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞

        try {
            $promoText = "–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥: QWERTY123" . PHP_EOL .
                '–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: https://example.com üòÅ';

            $responseText = isset($response['choices'][0]['message']['content'])
                ? $response['choices'][0]['message']['content'] . "\n" . PHP_EOL . $promoText
                : '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT.';

            return $responseText;
        } catch (\Exception $e) {
            Log::error('Error handling ChatGPT request', ['exception' => $e->getMessage()]);
            return '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.';
        }
    }
}
